library(ggplot2)
library(dplyr)
# Bar PLot with X
data <- mpg
plt <- ggplot(mpg, aes(x=class)) # import data into ggplot2
plt + geom_bar()
# Bar Plot with X and Y
mpg_summary <- mpg %>% group_by(manufacturer) %>% summarize(Vehicle_Count=n(), groups = 'keep') # creates summary table
plt <- ggplot(mpg_summary, aes(x=manufacturer, y=Vehicle_Count))
plt + geom_col() # We can skip this step
plt + geom_col() + xlab('Manufacturing Company') + ylab('Number of Vehicles in Dataset') +
theme(axis.text.x=element_text(angle=45, hjust=1))
# Line Plot
mpg_summary <- subset(mpg, manufacturer='toyota') %>% group_by(cyl) %>% summarize(Mean_Hwy=mean(hwy), .groups='keep')
plt <- ggplot(mpg_summary, aes(x=cyl, y=Mean_Hwy))
plt + geom_line()
plt + geom_line() + scale_x_discrete(limits=c(4,6,8)) + scale_y_continuous(breaks = c(15:30))
# Scatter Plot
plt <- ggplot(mpg, aes(x=displ, y=cty))
plt + geom_point() + xlab('Engine Size (L)') + ylab('City Fuel-Efficiency (MPG)')
# Scatter Plot with Colors
plt <- ggplot(mpg, aes(x=displ, y=cty, color=class))
plt + geom_point() + labs(x='Engine Size (L)', y='City Fuel-Efficiency (MPG)', color='Vehicle Class')
# Scatter Plot with Colors and Shapes
plt <- ggplot(mpg, aes(x=displ, y=cty, color=class, shape=drv))
plt + geom_point() + labs(x='Engine Size (L)', y='City Fuel-Efficiency (MPG)', color='Vehicle Class', shape='Type of Drive')
# Box Plot (box-and-whisker-plot)
plt <- ggplot(mpg, aes(y=hwy))
plt + geom_boxplot()
# Multi-Box Plot
plt <- ggplot(mpg, aes(x=manufacturer, y=hwy))
plt + geom_boxplot() + theme(axis.text.x=element_text)
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45, hjust=1))
# Heat Map
mpg_summary <- mpg %>% group_by(class, year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep')
plt <- ggplot(mpg_summary, aes(x=class, y=factor(year), fill=Mean_Hwy))
plt + geom_tile() + labs(x='Vehicle Class', y='Vehicle Year', fill='Mean Highway (MPG)')
# Multiple Variables Heat Map
mpg_summary <- mpg %>% group_by(model, year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep')
plt <- ggplot(mpg_summary, aes(x=model, y=factor(year), fill=Mean_Hwy))
plt + geom_tile() + labs(x='Model', y='Vehicle Year', fill='Mean Highway (MPG)')
plt + geom_tile() + labs(x='Model', y='Vehicle Year', fill='Mean Highway (MPG)') + theme(axis.text.x = element_text(angle=90, hjust=1, vjust=.5))
# Multiple Layers Plot
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy))
plt + geom_boxplot() +
theme(axis.text.x=element_text(angle=45, hjust=1)) +
geom_point()
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ), .groups = 'keep')
plt <- ggplot(mpg_summary,aes(x=class,y=Mean_Engine))
plt + geom_point(size=4) + labs(x="Vehicle Class",y="Mean Engine Size")
plt + geom_point(size=4) + labs(x="Vehicle Class",y="Mean Engine Size") +
geom_errorbar(aes(ymin=Mean_Engine-SD_Engine,ymax=Mean_Engine+SD_Engine))
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ),SD_Engine=sd(displ), .groups = 'keep')
plt + geom_point(size=4) + labs(x="Vehicle Class",y="Mean Engine Size") +
geom_errorbar(aes(ymin=Mean_Engine-SD_Engine,ymax=Mean_Engine+SD_Engine))
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ),SD_Engine=sd(displ), .groups = 'keep')
plt <- ggplot(mpg_summary,aes(x=class,y=Mean_Engine)) #import dataset into ggplot2
plt + geom_point(size=4) + labs(x="Vehicle Class",y="Mean Engine Size") + #add scatter plot with labels
geom_errorbar(aes(ymin=Mean_Engine-SD_Engine,ymax=Mean_Engine+SD_Engine)) #overlay with error bars
# Faceting (Separating plots for each level)
mpg_long <- mpg %>%  gather(key='MPG_Type', value='Rating', c(cty, hwy))
# Faceting (Separating plots for each level)
mpg_long <- mpg %>%  gather(key='MPG_Type',value='Rating',c(cty, hwy))
# Faceting (Separating plots for each level)
mpg_long <- mpg %>%  gather(key="MPG_Type",value="Rating",c(cty,hwy))
# Faceting (Separating plots for each level)
mpg_long <- mpg %>% gather(key="MPG_Type",value="Rating",c(cty,hwy)) #convert to long format
library(dplyr)
# Faceting (Separating plots for each level)
mpg_long <- mpg %>% gather(key="MPG_Type",value="Rating",c(cty,hwy)) #convert to long format
library(tidyr)
# Faceting (Separating plots for each level)
mpg_long <- mpg %>% gather(key="MPG_Type",value="Rating",c(cty,hwy)) #convert to long format
# Faceting (Separating plots for each level)
mpg_long <- mpg %>% gather(key="MPG_Type",value="Rating",c(cty,hwy))
head(mpg_long)
plt <- ggplot(mpg_long, aes(x=manufacturer, y=Rating, color=MPG_Type))
plt + geom_boxplot() + theme(axis.text.x=element_text(angle = 45, hjust = 1))
plt + geom_boxplot() + facet_wrap(vars(MPG_Type)) +
theme(axis.text.x=element_text(angle=45, hjust = 1), legend.position = 'none') + xlab('Manufacturer')
library(ggplot2)
library(dplyr)
library(tidyr)
# Qualitative Test for Normality
ggplot(mtcars, aes(x=wt)) + geom_density()
# Quantitative Test for Normality
shapiro.test(mtcars$wt)
library(ggplot2)
library(dplyr)
library(tidyr)
# Qualitative Test for Normality
ggplot(mtcars, aes(x=wt)) + geom_density()
library(ggplot2)
library(dplyr)
library(tidyr)
# Bar PLot with X
data <- mpg
plt <- ggplot(mpg, aes(x=class)) # import data into ggplot2
plt + geom_bar()
# Import Libraries
library(ggplot2)
library(dplyr)
library(tidyr)
setwd("~/git/Code/R")
install.packages('tidyverse')
library(tidyr)
library(dplyr)
library(ggplot2)
ggplot(mtcars, aes(x=wt)) + geom_density()
shapiro.test(mtcars$wt)
# Import used car data set
population_table <- read.csv('used_car_data.csv',check.names = F,stringsAsFactors = F)
plt <- ggplot(population_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
sample_table <- population_table %>% sample_n(50) #randomly sample 50 data points
plt <- ggplot(sample_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
?t.test()
# Test if the miles driven from our previous sample data set is statistically different from the miles driven in our population data
t.test(log10(sample_table$Miles_Driven),mu=mean(log10(population_table$Miles_Driven))) #compare sample versus population means
# Two-Sample t-Test
sample_table <- population_table %>% sample_n(50) #generate 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50) #generate another 50 randomly sampled data points
t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven)) #compare means of two samples
# PAIRED TEST
# Importing Dataset
mpg_data <- read.csv('mpg_modified.csv') #import dataset
mpg_1999 <- mpg_data %>% filter(year==1999) #select only data points where the year is 1999
mpg_2008 <- mpg_data %>% filter(year==2008) #select only data points where the year is 2008
# Compare 2 samples
t.test(mpg_1999$hwy,mpg_2008$hwy,paired = T) #compare the mean difference between two samples
# ANOVA
mtcars_filt <- mtcars[,c("hp","cyl")] #filter columns from mtcars dataset
mtcars_filt$cyl <- factor(mtcars_filt$cyl) #convert numeric column to factor
aov(hp ~ cyl,data=mtcars_filt) #compare means across multiple levels
summary(aov(hp ~ cyl,data=mtcars_filt))
# Correlation (Pearson Correlation)
head(mtcars)
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) #import dataset into ggplot2
plt + geom_point() #create scatter plot
cor(mtcars$hp,mtcars$qsec) #calculate correlation coefficient
# Correlation (Pearson Correlation) another example
used_cars <- read.csv('used_car_data.csv',stringsAsFactors = F) #read in dataset
head(used_cars)
plt <- ggplot(used_cars,aes(x=Miles_Driven,y=Selling_Price)) #import dataset into ggplot2
plt + geom_point() #create a scatter plot
cor(used_cars$Miles_Driven,used_cars$Selling_Price) #calculate correlation coefficient
# Correlation Matrix
used_matrix <- as.matrix(used_cars[,c("Selling_Price","Present_Price","Miles_Driven")]) #convert data frame into numeric matrix
cor(used_matrix)
# Linear Regression
lm(qsec ~ hp,mtcars) #create linear model
summary(lm(qsec~hp,mtcars)) #summarize linear model
# Create Linear Model
model <- lm(qsec ~ hp,mtcars) #create linear model
yvals <- model$coefficients['hp']*mtcars$hp + model$coefficients['(Intercept)'] #determine y-axis values from linear model
# PLot linear model
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
# Multiple Linear Regression
lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars) #generate multiple linear regression model
summary(lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars)) #generate summary statistics
# Build Contingency Table
table(mpg$class,mpg$year) #generate contingency table
# Chi-Squared Test (Categorical Data)
# Build Contingency Table
tbl <- table(mpg$class,mpg$year) #generate contingency table
chisq.test(tbl) #compare categorical distributions
setwd("~/git/Modules/MechaCar_Statistical_Analysis")
# Import Libraries
library(ggplot2)
library(dplyr)
library(tidyr)
# Import MechaCar_mpg.csv
cars_table <- read.csv('MechaCar_mpg.csv',check.names = F,stringsAsFactors = F)
# Import Libraries
library(ggplot2)
library(dplyr)
library(tidyr)
# Import MechaCar_mpg.csv
cars_table <- read.csv('MechaCar_mpg.csv',check.names = F,stringsAsFactors = F)
# Multiple Linear Regression
lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars) #generate multiple linear regression model
View(cars_table)
# Multiple Linear Regression
lm(qsec ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD + mpg,data=cars_table) #generate multiple linear regression model
# Qualitative Test for Normality
ggplot(mtcars, aes(x=wt)) + geom_density()
# Correlation (Pearson Correlation)
head(mtcars)
head(cars_table)
# Multiple Linear Regression
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=cars_table) #generate multiple linear regression model
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=cars_table)) #generate summary statistics
# Import Suspension_Coil.csv
suspension_table <- read.csv('Suspension_Coil.csv',check.names = F,stringsAsFactors = F)
head(cars_table)
summarize(suspension_table)
# Bar Plot with X and Y
mpg_summary <- mpg %>% group_by(manufacturer) %>% summarize(Vehicle_Count=n(), groups = 'keep') # creates summary table
summarize(Vehicle_Count=n(), groups = 'keep')
# Bar Plot with X and Y
mpg_summary <- mpg %>% group_by(manufacturer) %>% summarize(Vehicle_Count=n(), groups = 'keep') # creates summary table
mpg_summary
setwd("~/git/Modules/MechaCar_Statistical_Analysis")
?summarize()
head(suspension_table)
# Import Suspension_Coil.csv
suspension_table <- read.csv('Suspension_Coil.csv',check.names = F,stringsAsFactors = F)
head(suspension_table)
# Bar Plot with X and Y
mpg_summary <- mpg %>% group_by(manufacturer) %>% summarize(Vehicle_Count=n(), groups = 'keep') # creates summary table
mpg_summary
# Heat Map
mpg_summary <- mpg %>% group_by(class, year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep')
mpg_summary
head(suspension_table)
summary(suspension_table)
psi <- group_by(suspension_table, psi)
psi <- group_by(suspension_table, PSI)
summarize(suspension_table, mean(PSI))
total_summary <- summarize(suspension_table, mean(PSI))
total_summary
total_summary <- summarize(suspension_table, mean(PSI), median(PSI))
total_summary
total_summary <- summarize(suspension_table, mean(PSI), median(PSI), variance(PSI))
total_summary
total_summary <- summarize(suspension_table, mean(PSI), median(PSI), sd(PSI))
total_summary
total_summary <- summarize(suspension_table, mean(PSI), median(PSI), sd(PSI), var(PSI))
total_summary
total_summary <- summarize(suspension_table, mean(PSI), median(PSI), var(PSI), sd(PSI))
total_summary
total_summary <- data.frame(summarize(suspension_table, mean(PSI), median(PSI), var(PSI), sd(PSI)) )
total_summary
View(total_summary)
total_summary2 <- summarize(suspension_table, mean(PSI), median(PSI), var(PSI), sd(PSI))
total_summary2
View(total_summary2)
